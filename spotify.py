# -*- coding: utf-8 -*-
"""Spotify.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1wcYAIqimwm3p6q06P9lKl5HVtYzHJaRk
"""

from datasets import load_dataset

dataset = load_dataset("BubuDavid/Selena-Gomez-With-Lyrics-And-Spotify-Audio-Features", data_files="songs_data.json")

import pandas as pd
df = pd.DataFrame(dataset["train"])

df.head()

# df['title','lyrics', 'release_day', 'album', 'popularity']
# print(df[['title', 'lyrics', 'release_day', 'album', 'popularity']])
df = df[['title', 'lyrics', 'artists','release_day', 'album', 'popularity']]

df.head()

df.drop(df.columns.difference(['title', 'lyrics', 'artists' ,'release_day', 'album', 'popularity']), axis=1, inplace=True)
df.head()

print(df[['album']])
df.drop(['album'], axis=1, inplace=True)

df.head(15)

df['title'].count()

df.count()

df.shape

# Title That contains selena gomez in it 
# Result:- There are total 164 titles out of which 135 titles have name of selena gomez in it
print(df[df['artists'].str.contains("selena gomez", case=False)].count())

# Printing the count of the data in which there is name of selena gomez in the artists column 
df= df[df['artists'].str.contains("selena gomez", case=False)]
df.head()
df.count()

df.head()

df['release_day'] = pd.to_datetime(df['release_day'])
df['release_year'] = df['release_day'].dt.year
df['release_month'] = pd.to_datetime(df['release_day']).dt.to_period('M')

df.head()

#Counting release of title yearly & plotting into the chart
title_counts_by_year = df.groupby(df['release_year'])['title'].count()
print(title_counts_by_year)
# Plotting the line chart
plt.figure(figsize=(12, 6))
plt.plot(title_counts_by_year.index, title_counts_by_year.values, marker='o')
plt.xlabel('Year')
plt.ylabel('Count')
plt.title('Title Launches by Year')
plt.xticks(rotation=45)
plt.show()

titles_2008 = df.loc[(df['release_year'] == 2008), 'title']
print(titles_2008)

# Find most common words used for lyrics from all the 135 songs

#finding the average of released titles according to the release year !
# Group the data by 'release_year' and calculate the average popularity count
average_popularity_by_year = df.groupby('release_year')['popularity'].mean()

# Create a new DataFrame to hold the average yearly popularity count
average_popularity_df = pd.DataFrame({'Year': average_popularity_by_year.index, 'Average Popularity': average_popularity_by_year.values})

# Display the average yearly popularity count DataFrame
print(average_popularity_df)

#Filtering till year 2022 only as found record is till year 2022 only !!
filtered_df = average_popularity_df[average_popularity_df['Year'] <= 2022]
print("Released titles according to year", title_counts_by_year)
print("Popularity according to year", filtered_df)
# Plotting the line chart for average popularity according to year (up to 2022)
plt.figure(figsize=(12, 6))
plt.plot(filtered_df['Year'], filtered_df['Average Popularity'], marker='o')
plt.xlabel('Year')
plt.ylabel('Average Popularity')
plt.title('Average Popularity of Selena Gomez\'s Titles by Year (up to 2022)')
plt.xticks(rotation=45)
plt.show()

sorted_data = df.sort_values('popularity', ascending=False)

# Filter the top 5 titles with highest popularity
top_5_popular_titles = sorted_data.head(5)

# Display the filtered DataFrame
print(top_5_popular_titles[['title', 'popularity']])

sorted_data = top_5_popular_titles.sort_values('popularity', ascending=False)

# Plotting the bar chart for popularity of the top 5 songs
plt.figure(figsize=(12, 6))
plt.bar(sorted_data['title'], sorted_data['popularity'])

plt.xlabel('Song')
plt.ylabel('Popularity')
plt.title('Popularity of Top 5 Selena Gomez Songs')
plt.xticks(rotation=45)
plt.show()

df['lyrics'].count()

df.head()

from wordcloud import WordCloud

#Finding words that are highest used by selena gomez from the lyrics of her 135 titles 
from wordcloud import WordCloud
import matplotlib.pyplot as plt

# Assuming you have a DataFrame named 'df' containing the lyrics column

# Combine all the lyrics into a single string
all_lyrics = ' '.join(df['lyrics'])

# Generate a word cloud
wordcloud = WordCloud(width=800, height=400, max_words=100, background_color='white').generate(all_lyrics)

# Get the word frequencies from the word cloud
word_frequencies = wordcloud.process_text(all_lyrics)

# Sort the words based on frequency in descending order
sorted_words = sorted(word_frequencies.items(), key=lambda x: x[1], reverse=True)

# Print the most used words and their frequencies
for word, frequency in sorted_words[:10]:
    print(f"{word}: {frequency}")

# Plot the word cloud
plt.figure(figsize=(12, 6))
plt.imshow(wordcloud, interpolation='bilinear')
plt.axis('off')
plt.title('Most Used Words in Lyrics')
plt.show()

# count of songs for the highest used words from the lyrics
# Combine all the lyrics into a single string
all_lyrics = ' '.join(df['lyrics'])

# Generate a word cloud
wordcloud = WordCloud(width=800, height=400, max_words=100, background_color='white').generate(all_lyrics)

# Get the word frequencies from the word cloud
word_frequencies = wordcloud.process_text(all_lyrics)

# Sort the words based on frequency in descending order
sorted_words = sorted(word_frequencies.items(), key=lambda x: x[1], reverse=True)

# Get the highest used words (top 10 in this case)
highest_used_words = [word for word, _ in sorted_words[:10]]

# Create a new column 'word_count' to store the count of each word in the lyrics
df['word_count'] = df['lyrics'].apply(lambda x: sum(1 for word in x.lower().split() if word in highest_used_words))

# Group the data by word and calculate the count of songs for each word
songs_count_by_word = df.groupby('word_count')['title'].count()

# Print the count of songs for each word
for word in highest_used_words:
    count = songs_count_by_word.get(len(word), 0)
    print(f"{word}: {count} songs")



